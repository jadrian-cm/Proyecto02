#!usr/bin/python3

# Integrantes:
# Bryan Fern√°ndez S√°nchez, 2023131084
# Jos√© Carballo Mart√≠nez, 2019046749

# Pseudoesquema:
# Men√∫ Inicial: Iniciar juego, instrucciones y solarpunk y jardiner√≠a clandestina
# Men√∫ Dificultad: F√°cil, medio, d√≠ficil y personalizado
# Mostrar matriz, que ser√≠a la ciudad
# Men√∫ para las acciones: Planta, Semilla y Ciclov√≠a
# Actualizar matriz
# Programar la municipalidad:
# - Establecer estados
# - Crear funci√≥n que verifique el estado de la matriz
# Crear funci√≥n para verificar game over
# Preguntar si se quiere jugar de nuevo
# Algunos uft8icons de plantas: üå∞, üå±, üå∑, üåπ, üå∫, üåª, üåº, ü•Ä

import random

# Semillas: [nombre, turnos para crecer, turnos vivas]
semillas_facil = [
    ["cosmos", 2],
    ["zinias", 3],
    ["salvias", 2],
    ["kiri", 3],
    ["herbaceas", 2],
]
semillas_medio = [
    ["cerezo", 4],
    ["tomate", 3],
    ["rosas", 3],
    ["tulipanes", 4],
    ["mam√≥n chino", 4],
]
semillas_dificil = [
    ["girasoles", 4, 9],
    ["papas", 5, 15],
    ["vinca", 5, 15],
    ["lirio", 5, 15],
    ["dedalera", 6, 25],
]
semillas = []

# Falta la lista de las plantas

dificultad = 0  # Nivel de dificultad
mapa_juego = []  # Matriz que representa la ciudad


def bienvenida():
    """
    Funci√≥n que imprime el banner de bienvenida y el
    men√∫ inicial.
    """

    print("\033[38;2;255;211;64m ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê \033[0;m")
    print("\033[38;2;255;211;64m ‚îÇ                                      ‚îÇ \033[0;m")
    print("\033[38;2;255;211;64m ‚îÇ  SOLARPUNK Y JARDINER√çA CLANDESTINA  ‚îÇ \033[0;m")
    print("\033[38;2;255;211;64m ‚îÇ                                      ‚îÇ \033[0;m")
    print("\033[38;2;255;211;64m ‚îÇ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MEN√ö PRINCIPAL ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÇ \033[0;m")
    print("\033[38;2;255;211;64m ‚îÇ                                      ‚îÇ \033[0;m")
    print("\033[38;2;255;211;64m ‚îÇ  [1] Iniciar juego                   ‚îÇ \033[0;m")
    print("\033[38;2;255;211;64m ‚îÇ  [2] Instrucciones                   ‚îÇ \033[0;m")
    print("\033[38;2;255;211;64m ‚îÇ  [3] Sobre jardiner√≠a clandestina    ‚îÇ \033[0;m")
    print("\033[38;2;255;211;64m ‚îÇ                                      ‚îÇ \033[0;m")
    print("\033[38;2;255;211;64m ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò \033[0;m")
    print()


def men√∫_principal():
    """
    Funci√≥n que solicita al jugador que elija una opci√≥n
    y valida que la entrada sea un n√∫mero entre 1 y 3.
    """

    opci√≥n = input("\033[38;2;255;211;64m >> \033[0;m")

    if opci√≥n.isdigit():
        opci√≥n = int(opci√≥n)

        if 1 <= opci√≥n <= 3:
            # print("\033[2J\033[1;1f")

            if opci√≥n == 1:  # Iniciar juego
                print("\033[2J\033[1;1f")

            elif opci√≥n == 2:  # Intrucciones
                print("\033[2J\033[1;1f")
                print("\nIntrucciones\n")
                # Aqu√≠ se debe agregar el archivo de instrucciones

            elif opci√≥n == 3:  # Solarpunk y jardiner√≠a clandestina
                print("\033[2J\033[1;1f")
                print("\nSolarpunk y jardiner√≠a clandestina\n")
                # Aqu√≠ debe ir el archivo sobre jardiner√≠a clandestina

        else:
            print("\033[38;2;255;0;0m Opci√≥n no v√°lida.\n \033[0;m")
            return men√∫_principal()

    else:
        print("\033[38;2;255;0;0m Solo n√∫meros entre 1 y 3.\n \033[0;m")
        return men√∫_principal()


def men√∫_dificultad():
    """
    Funci√≥n que muestra el men√∫ de dificultad y valida
    que la entrada del jugador sea un n√∫mero entre 1 y 4.
    """

    global dificultad

    print("\033[38;2;255;211;64m ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê \033[0;m")
    print("\033[38;2;255;211;64m ‚îÇ                                      ‚îÇ \033[0;m")
    print("\033[38;2;255;211;64m ‚îÇ  SOLARPUNK Y JARDINER√çA CLANDESTINA  ‚îÇ \033[0;m")
    print("\033[38;2;255;211;64m ‚îÇ                                      ‚îÇ \033[0;m")
    print("\033[38;2;255;211;64m ‚îÇ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ DIFICULTADES DEL JUEGO ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÇ \033[0;m")
    print("\033[38;2;255;211;64m ‚îÇ                                      ‚îÇ \033[0;m")
    print("\033[38;2;255;211;64m ‚îÇ  [1] F√°cil                           ‚îÇ \033[0;m")
    print("\033[38;2;255;211;64m ‚îÇ  [2] Normal                          ‚îÇ \033[0;m")
    print("\033[38;2;255;211;64m ‚îÇ  [3] D√≠ficil                         ‚îÇ \033[0;m")
    print("\033[38;2;255;211;64m ‚îÇ  [4] Personalizado                   ‚îÇ \033[0;m")
    print("\033[38;2;255;211;64m ‚îÇ                                      ‚îÇ \033[0;m")
    print("\033[38;2;255;211;64m ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò \033[0;m")
    print()

    dificultad = men√∫_dificultad_aux()

    # dificultad = int(dificultad)

    # if 1 <= dificultad <= 4:
    #     if dificultad == 1:  # F√°cil
    #         print("\033[2J\033[1;1f")
    #         return mostrar_matriz()

    #     elif dificultad == 2:  # Normal
    #         print("\033[2J\033[1;1f")
    #         return mostrar_matriz()

    #     elif dificultad == 3:  # Dif√≠cil
    #         print("\033[2J\033[1;1f")
    #         return mostrar_matriz()

    #     elif dificultad == 4:  # Personalizado
    #         print("\033[2J\033[1;1f")
    #         return mostrar_matriz()
    #         # Aqu√≠ se llama a la funci√≥n para setear el tama√±o nxm
    #         # de la matriz.

    return dificultad


def men√∫_dificultad_aux():
    """
    Funci√≥n que valida la opci√≥n elegida para la dificultad.
    """

    opci√≥n = input("\033[38;2;255;211;64m >> \033[0;m")

    if not opci√≥n.isdigit():
        # print("\033[2J\033[1;1f")
        print("\033[38;2;255;0;0m Solo n√∫meros entre 1 y 4.\n \033[0;m")
        return men√∫_dificultad_aux()

    if int(opci√≥n) < 1 or int(opci√≥n) > 4:
        print("\033[38;2;255;0;0m Opci√≥n no v√°lida.\n \033[0;m")
        return men√∫_dificultad_aux()

    return int(opci√≥n)


def crear_matriz_aux():
    """
    Funci√≥n que permite escoger las dimensiones para
    crear una matriz.
    """

    global dificultad
    global mapa_juego
    global semillas

    # Dificuldades default
    if dificultad == 1:
        print("\033[2J\033[1;1f")
        mapa_juego = crear_matriz(6, 6)
        semillas = semillas_facil

    elif dificultad == 2:
        print("\033[2J\033[1;1f")
        mapa_juego = crear_matriz(10, 10)
        semillas = semillas_medio

    elif dificultad == 3:
        print("\033[2J\033[1;1f")
        mapa_juego = crear_matriz(18, 18)
        semillas = semillas_dificil

    # Personalizadas
    elif dificultad == 4:
        # Validaciones
        filas = input("\033[38;2;255;211;64m  N√∫mero de filas: \033[0;m")
        columnas = input("\033[38;2;255;211;64m N√∫mero de columnas: \033[0;m")

        if not filas.isdigit() or not columnas.isdigit():
            print("\033[38;2;255;0;0mSolo puede ingresar n√∫meros.\n \033[0;m")
            return crear_matriz_aux()
        
        if (int(filas) < 3 or int(filas) > 20 or
            int(columnas) < 3 or int(columnas) > 20):
            print("\033[38;2;255;0;0m Tama√±o de matriz no v√°lida.\n \033[0;m")
            return crear_matriz_aux()

        # Crear matriz
        print("\033[2J\033[1;1f")
        mapa_juego = crear_matriz(int(filas), int(columnas))
        semillas = semillas_medio


def crear_matriz(filas, columnas):
    """
    Funci√≥n que crea una matriz con las dimensiones del
    par√°metro de entrada.
    """

    global mapa_juego

    for _ in range(filas):
        fila = []

        for _ in range(columnas):
           fila.append("üü©")
        
        mapa_juego.append(fila)

    # mapa_juego = [["üü©" for _ in range(columnas)] for _ in range(filas)]

    return mapa_juego


def mostrar_matriz():
    """
    Funci√≥n que muestra los datos del tablero.
    """

    global mapa_juego

    for fila in mapa_juego:
        for elemento in fila:
            print(elemento, end="")
        print()  # Salto de l√≠nea despu√©s de cada fila.

    print()


def men√∫_acciones():
    """
    Funci√≥n que muestra el men√∫ que le permite al usuario
    escoger una acci√≥n en el turno de juego.
    """

    print("\033[38;2;255;211;64m [1] Sembrar una semilla \033[0;m")
    print("\033[38;2;255;211;64m [2] Sembrar una planta \033[0;m")
    print("\033[38;2;255;211;64m [3] Crear una ciclov√≠a \033[0;m")
    print()

    opci√≥n = input("\033[38;2;255;211;64m >> \033[0;m")

    if not validar_opci√≥n(opci√≥n, 1, 3):
        return men√∫_acciones()
    
    return opci√≥n


def solicitar_coordenadas():
    """
    Funci√≥n que muestra el men√∫ que solicita al jugador
    el espacio donde quiere efectuar la acci√≥n previamente
    seleccionada.
    """

    global mapa_juego

    print("\033[38;2;255;211;64m Inserte las coordenadas: \033[0;m")

    x = input("\033[38;2;255;211;64m Coordenada x: \033[0;m")
    y = input("\033[38;2;255;211;64m Coordenada y: \033[0;m")

    if (not validar_opci√≥n(x, 0, len(mapa_juego) - 1) or
        not validar_opci√≥n(y, 0, len(mapa_juego) - 1)):
        return solicitar_coordenadas()


def validar_opci√≥n(opci√≥n, n1, n2):
    """
    Funci√≥n que valida datos.
    """

    if not opci√≥n.isdigit():
        print("\033[38;2;255;0;0m Solo puede ingresar n√∫meros.\n \033[0;m")
        return False

    if int(opci√≥n) < n1 or int(opci√≥n) > n2:
        print(
            "\033[38;2;255;0;0m Solo n√∫meros entre " +
            str(n1) + " y " + str(n2) + ".\n \033[0;m"
        )
        return False

    return True


def men√∫_sembrar_semilla():
    """
    Funci√≥n que muestra el men√∫ de la opci√≥n sembrar
    semillas.
    """

    global semillas

    print("\033[38;2;255;211;64m ¬øQu√© semilla desea plantar?\n \033[0;m")
    print(
        "\033[38;2;255;211;64m" +
        " No----------Nombre----------Carga----------Tiempo viva " +
        "\033[0;m"
    )
    print()
    print()
    print(
        "\033[38;2;255;211;64m" +
        " 0-----------" + str(semillas[0][0]) +
        "------------" + str(semillas[0][1]) +
        "-----------------" + str(semillas[0][2]) +
        " \033[0;m"
    )
    print()
    print(
        "\033[38;2;255;211;64m" +
        " 1-----------" + str(semillas[1][0]) +
        "------------" + str(semillas[1][1]) +
        "-----------------" + str(semillas[1][2]) +
        " \033[0;m"
    )
    print()
    print(
        "\033[38;2;255;211;64m" +
        " 2-----------" + str(semillas[2][0]) +
        "------------" + str(semillas[2][1]) +
        "-----------------" + str(semillas[2][2]) +
        " \033[0;m"
    )
    print()
    print(
        "\033[38;2;255;211;64m" +
        " 3-----------" + str(semillas[3][0]) +
        "------------" + str(semillas[3][1]) +
        "-----------------" + str(semillas[3][2]) +
        " \033[0;m"
    )
    print()
    print(
        "\033[38;2;255;211;64m" +
        " 4-----------" + str(semillas[4][0]) +
        "------------" + str(semillas[4][1]) +
        "-----------------" + str(semillas[4][2]) +
        " \033[0;m"
    )
    print()
    print()

    opci√≥n = input("\033[38;2;255;211;64m N√∫mero de planta: \033[0;m")

    if not validar_opci√≥n(opci√≥n, 0, 4):
        return men√∫_sembrar_semilla()

    opci√≥n = semillas[int(opci√≥n)]

    return opci√≥n


def modificar_matriz():
    """
    ...
    """

    return None

# Luego mostrar la matriz actualizada y el men√∫ de acciones

# Estados a programar:
#  + Si en la posici√≥n mapa_juego[i][j] hay una semilla:
#     - La municipalidad puede construir
#  + Si en la posici√≥n mapa_juego[i][j] hay una planta:
#     - La municipalidad puede arrancarla y construir
#  + Si en la posici√≥n mapa_juego[i][j] hay una ciclov√≠a:
#     - La municipalidad puede destruirla y en otro turno construir


# def verificar_estado_matriz(matriz):
#     """
#     Funci√≥n que verifica qu√© hay en cada posici√≥n de la
#     matriz, para decidir c√≥mo debe proceder el jugador
#     y la municipalidad.
#     """

#     filas = len(matriz)
#     columnas = len(matriz[0])

#     for i in range(filas):
#         for j in range(columnas):
#             elemento = matriz[i][j]

#     return elemento


def municipalidad(matriz):
    """
    Funci√≥n que compara cada posici√≥n del mapa_juego y
    construye placas de concreto, destruye ciclov√≠as y
    arranca plantas.
    """

    filas = len(matriz)
    columnas = len(matriz[0])

    # Agrega concreto aleatoriamente entre 0 y n/2 filas.
    cantidad_concreto = random.randint(0, filas // 2)
    for _ in range(cantidad_concreto):
        fila = random.randint(0, filas - 1)
        columna = random.randint(0, columnas - 1)
        matriz[fila][columna] = "üî≥"

    # Reemplaza la semilla con concreto
    for i in range(filas):
        for j in range(columnas):
            if matriz[i][j] == "üå±":
                matriz[i][j] = "üî≥"

    # Reemplaza la ciclov√≠a con tierra
    for i in range(filas):
        for j in range(columnas):
            if matriz[i][j] == "üöµ":
                matriz[i][j] = "üü©"

    # Reemplaza la planta con concreto
    for i in range(filas):
        for j in range(columnas):
            if matriz[i][j] == "üåπ":
                matriz[i][j] = "üî≥"

    return matriz


def manejador_juego():
    men√∫_acciones()
    solicitar_coordenadas()
    men√∫_sembrar_semilla()

    return None


def principal():
    """
    Funci√≥n que se encarga de inicializar el juego.
    """

    global dificultad

    bienvenida()
    men√∫_principal()
    men√∫_dificultad()
    crear_matriz_aux()
    mostrar_matriz()
    manejador_juego()
    # desvincularla del men√∫ incial, ya que necesito llamarla cuando
    # la opci√≥n elegida es 1.
    # Mostrar ciudad (matriz)


principal()
